version: "3.7"

services:
  # Product Core Service + DB
  product-db: # Name and environment variables must match datasource configuration in application.yml
    image: mysql:5.7
    volumes:
      - "./data_products:/var/lib/mysql"
    environment:
      MYSQL_ROOT_PASSWORD: 1337babe
      MYSQL_DATABASE: products
      MYSQL_USER: webshopuser
      MYSQL_PASSWORD: c0ffeebabe
    expose: # Opens ports locally in the docker compose network
      - "3306"
    networks:
      - webshop-network

  product-service:
    build:
      context: ./webshop-core-product-service
    ports:
      - "9250:8080"
    networks:
      - webshop-network
    depends_on:
      - product-db
    restart: on-failure # Try again if database was not ready

  # Category Core Service + DB
  category-db: # Name and environment variables must match datasource configuration in application.yml
    image: mysql:5.7
    volumes:
      - "./data_category:/var/lib/mysql"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: category
      MYSQL_USER: categoryuser
      MYSQL_PASSWORD: geheim
    expose:
      - "3306" # Opens ports locally in the docker compose network
    networks:
      - webshop-network

  category-service:
    build:
      context: ./webshop-core-category-service
    ports:
      - "9252:8080"
    networks:
      - webshop-network
    depends_on:
      - category-db
    restart: on-failure # Try again if database was not ready

  # User Core Service + DB
  user-db: # Name and environment variables must match datasource configuration in application.yml
    image: mysql:5.7
    volumes:
      - "./data_users:/var/lib/mysql"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: users
      MYSQL_USER: usercore
      MYSQL_PASSWORD: usercore
    expose: # Opens ports locally in the docker compose network
      - "3306"
    networks:
      - webshop-network

  user-service:
    build:
      context: ./webshop-core-user-service
    ports:
      - "9251:8080"
    networks:
      - webshop-network
    depends_on:
      - user-db
    restart: on-failure # Try again if database was not ready

  # Inventory Composite Service
  inventory-service:
    build:
      context: ./webshop-composite-inventory-service
    ports:
      - "9253:8080"
    networks:
      - webshop-network
    depends_on:
      - product-service
      - category-service
    restart: on-failure

  # Inventory Composite Service
  discovery-service:
    build:
      context: ./webshop-discovery-service
    ports:
      - "9254:8080"
    networks:
      - webshop-network
    restart: on-failure

volumes:
  data_products:
  data_users:
  data_category:

networks:
  webshop-network:
    driver: bridge
